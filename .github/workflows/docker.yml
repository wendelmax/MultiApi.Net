name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: '19 11 * * *'
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      build_only:
        description: 'Build only (no push)'
        required: false
        default: false
        type: boolean

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  DOTNET_VERSION: '9.0.x'
  MONGODB_CONNECTION_STRING: ${{ secrets.CONNECTIONSTRINGS__MONGODB }}

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: |
          dotnet restore MultiApi.Net.sln

      - name: Build solution
        run: |
          dotnet build MultiApi.Net.sln --no-restore --configuration Release

      - name: Run tests
        run: |
          dotnet test MultiApi.Net.sln --no-build --verbosity normal --configuration Release

      - name: Publish StarWars API
        run: |
          dotnet publish StarWars.Api/StarWars.Api.csproj -c Release -o ./publish/StarWars.Api

      - name: Publish Collection Manager API
        run: |
          dotnet publish CollectionManager.Api/CollectionManager.Api.csproj -c Release -o ./publish/CollectionManager.Api

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request' && github.event.inputs.build_only != 'true'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request' && github.event.inputs.build_only != 'true'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' && github.event.inputs.build_only != 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DOTNET_VERSION=${{ env.DOTNET_VERSION }}

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' && github.event.inputs.build_only != 'true' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

      - name: Test container health
        if: github.event.inputs.build_only != 'true'
        run: |
          echo "Testing container health..."
          
          # First, test if the image can run at all
          echo "Testing basic container startup..."
          docker run --rm --name basic-test ${{ steps.meta.outputs.tags }} echo "Container can start successfully"
          
          # Now test the full container
          echo "Starting full container for health testing..."
          docker run --rm -d --name health-test -p 8080:80 \
            -e CONNECTIONSTRINGS__MONGODB="${{ env.MONGODB_CONNECTION_STRING }}" \
            ${{ steps.meta.outputs.tags }}
          
          echo "Container started. Checking status..."
          docker ps -a
          
          echo "Monitoring container startup..."
          for i in {1..24}; do
            echo "Check $i/24 - Container status:"
            docker ps -a | grep health-test || echo "Container not found"
            
            if docker ps -a | grep health-test > /dev/null; then
              echo "Container is running. Checking logs:"
              docker logs health-test --tail 10
            else
              echo "Container died! Final logs:"
              docker logs health-test --tail 50 2>/dev/null || echo "No logs available"
              echo "Container failed to start properly"
              exit 1
            fi
            
            if [ $i -lt 24 ]; then
              echo "Waiting 10s before next check..."
              sleep 10
            fi
          done
          
          echo "Container survived startup phase. Final status check:"
          docker ps -a
          docker logs health-test --tail 50
          
          echo "Testing health endpoint with retry..."
          for i in {1..5}; do
            if curl -f http://localhost:8080/health; then
              echo "Health endpoint OK!"
              break
            fi
            echo "Health endpoint failed, attempt $i/5. Waiting 10s..."
            sleep 10
            if [ $i -eq 5 ]; then
              echo "Health endpoint failed after 5 attempts"
              exit 1
            fi
          done
          
          echo "Testing root endpoint with retry..."
          for i in {1..5}; do
            if curl -f http://localhost:8080/; then
              echo "Root endpoint OK!"
              break
            fi
            echo "Root endpoint failed, attempt $i/5. Waiting 10s..."
            sleep 10
            if [ $i -eq 5 ]; then
              echo "Root endpoint failed after 5 attempts"
              exit 1
            fi
          done
          
          echo "Waiting additional time for APIs to fully start..."
          sleep 60
          
          echo "Final container status check..."
          docker ps -a
          docker logs health-test --tail 50
          
          echo "Testing StarWars API endpoint with retry..."
          for i in {1..5}; do
            if curl -f http://localhost:8080/starwars/; then
              echo "StarWars API OK!"
              break
            fi
            echo "StarWars API failed, attempt $i/5. Waiting 10s..."
            sleep 10
            if [ $i -eq 5 ]; then
              echo "StarWars API failed after 5 attempts"
              exit 1
            fi
          done
          
          echo "Testing Collection Manager API endpoint with retry..."
          for i in {1..5}; do
            if curl -f http://localhost:8080/collections/; then
              echo "Collection Manager API OK!"
              break
            fi
            echo "Collection Manager API failed, attempt $i/5. Waiting 10s..."
            sleep 10
            if [ $i -eq 5 ]; then
              echo "Collection Manager API failed after 5 attempts"
              exit 1
            fi
          done
          
          echo "All health checks passed successfully!"

      - name: Debug container logs on failure
        if: failure() && github.event.inputs.build_only != 'true'
        run: |
          echo "Container failed health checks. Checking logs..."
          docker logs health-test || echo "Could not get container logs"
          
          echo "Checking all containers:"
          docker ps -a
          
          echo "Checking Docker system info:"
          docker system df
          
          echo "Checking recent Docker events:"
          docker events --since 5m --until 0m || echo "Could not get Docker events"
          
      - name: Cleanup test container
        if: always() && github.event.inputs.build_only != 'true'
        run: |
          docker stop health-test || true
          docker rm health-test || true

  test-docker-compose:
    name: Test with Docker Compose
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request' && github.event.inputs.build_only != 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Build Docker image for testing
        run: |
          docker build -t multiapi:test .

      - name: Test with docker-compose
        run: |
          echo "Testing with docker-compose..."
          echo "CONNECTIONSTRINGS__MONGODB=${{ env.MONGODB_CONNECTION_STRING }}" > .env
          docker-compose up -d --build
          
          echo "Waiting for services to start..."
          sleep 90
          
          echo "Testing health endpoint..."
          curl -f http://localhost/health || exit 1
          
          echo "Testing StarWars Swagger..."
          curl -f http://localhost/starwars/swagger || exit 1
          
          echo "Testing Collection Manager Swagger..."
          curl -f http://localhost/collections/swagger || exit 1
          
          echo "All docker-compose tests passed!"

      - name: Cleanup docker-compose
        if: always()
        run: |
          docker-compose down -v || true
          rm -f .env || true

  create-release-artifacts:
    name: Create Release Artifacts
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Get version from tag
        id: get_version
        run: |
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Restore dependencies
        run: |
          dotnet restore MultiApi.Net.sln

      - name: Build solution
        run: |
          dotnet build MultiApi.Net.sln --no-restore --configuration Release

      - name: Publish StarWars API
        run: |
          dotnet publish StarWars.Api/StarWars.Api.csproj -c Release -o ./publish/StarWars.Api

      - name: Publish Collection Manager API
        run: |
          dotnet publish CollectionManager.Api/CollectionManager.Api.csproj -c Release -o ./publish/CollectionManager.Api

      - name: Create release artifacts directory
        run: |
          mkdir -p ./release-artifacts

      - name: Package StarWars API
        run: |
          cd ./publish/StarWars.Api
          tar -czf ../../release-artifacts/StarWars.Api-${{ steps.get_version.outputs.version }}.tar.gz .
          cd ../..

      - name: Package Collection Manager API
        run: |
          cd ./publish/CollectionManager.Api
          tar -czf ../../release-artifacts/CollectionManager.Api-${{ steps.get_version.outputs.version }}.tar.gz .
          cd ../..

      - name: Save Docker image
        run: |
          docker build -t multiapi:${{ steps.get_version.outputs.version }} .
          docker save multiapi:${{ steps.get_version.outputs.version }} | gzip > ./release-artifacts/multiapi-${{ steps.get_version.outputs.version }}.tar.gz

      - name: Create deployment scripts
        run: |
          cat > ./release-artifacts/deploy.sh << 'EOF'
          #!/bin/bash
          echo "Deploying MultiApi.Net ${{ steps.get_version.outputs.version }}"
          
          # Extract APIs
          tar -xzf StarWars.Api-${{ steps.get_version.outputs.version }}.tar.gz -C /opt/StarWars.Api/
          tar -xzf CollectionManager.Api-${{ steps.get_version.outputs.version }}.tar.gz -C /opt/CollectionManager.Api/
          
          # Load Docker image
          docker load < multiapi-${{ steps.get_version.outputs.version }}.tar.gz
          
          # Run with docker-compose
          docker-compose up -d
          
          echo "Deployment completed!"
          EOF
          
          cat > ./release-artifacts/deploy.bat << 'EOF'
          @echo off
          echo Deploying MultiApi.Net ${{ steps.get_version.outputs.version }}
          
          REM Extract APIs
          tar -xzf StarWars.Api-${{ steps.get_version.outputs.version }}.tar.gz -C C:\opt\StarWars.Api\
          tar -xzf CollectionManager.Api-${{ steps.get_version.outputs.version }}.tar.gz -C C:\opt\CollectionManager.Api\
          
          REM Load Docker image
          docker load < multiapi-${{ steps.get_version.outputs.version }}.tar.gz
          
          REM Run with docker-compose
          docker-compose up -d
          
          echo Deployment completed!
          pause
          EOF
          
          chmod +x ./release-artifacts/deploy.sh

      - name: Create release notes
        run: |
          cat > ./release-artifacts/RELEASE_NOTES.md << EOF
          # MultiApi.Net ${{ steps.get_version.outputs.version }}
          
          **Release Date:** $(date -u +"%Y-%m-%d %H:%M UTC")
          **Commit:** ${{ github.sha }}
          
          ## What's Included
          
          This release includes:
          - StarWars API with Swagger documentation
          - Collection Manager API with MongoDB integration
          - Docker containerization with Nginx proxy
          - Comprehensive API documentation
          
          ## Installation
          
          ### Option 1: Docker (Recommended)
          \`\`\`bash
          # Extract the release
          tar -xzf multiapi-${{ steps.get_version.outputs.version }}.tar.gz
          
          # Run deployment script
          ./deploy.sh
          \`\`\`
          
          ### Option 2: Manual Deployment
          \`\`\`bash
          # Extract APIs
          tar -xzf StarWars.Api-${{ steps.get_version.outputs.version }}.tar.gz -C /opt/StarWars.Api/
          tar -xzf CollectionManager.Api-${{ steps.get_version.outputs.version }}.tar.gz -C /opt/CollectionManager.Api/
          
          # Load Docker image
          docker load < multiapi-${{ steps.get_version.outputs.version }}.tar.gz
          
          # Run with docker-compose
          docker-compose up -d
          \`\`\`
          
          ## Configuration
          
          Set the following environment variable:
          \`\`\`bash
          export CONNECTIONSTRINGS__MONGODB="your_mongodb_connection_string"
          \`\`\`
          
          ## Access Points
          
          - **Main Application:** http://localhost/
          - **StarWars API:** http://localhost/starwars/
          - **StarWars Swagger:** http://localhost/starwars/swagger
          - **Collection Manager API:** http://localhost/collections/
          - **Collection Manager Swagger:** http://localhost/collections/swagger
          - **Health Check:** http://localhost/health
          
          ## Support
          
          For issues and questions, please visit the GitHub repository.
          EOF

      - name: Create checksums
        run: |
          cd ./release-artifacts
          sha256sum * > SHA256SUMS
          cd ..

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ steps.get_version.outputs.version }}
          path: ./release-artifacts/
          retention-days: 90

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./release-artifacts/*.tar.gz
            ./release-artifacts/*.md
            ./release-artifacts/*.sh
            ./release-artifacts/*.bat
            ./release-artifacts/SHA256SUMS
          tag_name: ${{ steps.get_version.outputs.version }}
          name: MultiApi.Net ${{ steps.get_version.outputs.version }}
          body: |
            ## MultiApi.Net ${{ steps.get_version.outputs.version }}
            
            ### What's Included
            - **StarWars API** - Complete API with Swagger documentation
            - **Collection Manager API** - MongoDB-based collection management
            - **Docker Container** - Ready-to-run containerized application
            - **Nginx Proxy** - Intelligent routing between services
            
            ### Quick Start
            1. Download the release artifacts
            2. Extract the Docker image: `docker load < multiapi-${{ steps.get_version.outputs.version }}.tar.gz`
            3. Run with docker-compose: `docker-compose up -d`
            
            ### Documentation
            - [API Documentation](https://github.com/${{ github.repository }}/blob/main/README.md)
            - [Docker Setup](https://github.com/${{ github.repository }}/blob/main/README-Docker.md)
            
            ### GitHub Container Registry
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.version }}
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ```
          draft: false
          prerelease: false
          generate_release_notes: true
